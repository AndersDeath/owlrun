#!/usr/bin/env node
 /** Version: 0.0.1 */
"use strict";

var _imports = require("./imports");

var introduce = function introduce() {
  console.log(_imports.chalk.yellow(_imports.figlet.textSync('Owlrun utility', {})));
  console.log(_imports.chalk.yellow('--------------'));
  console.log(_imports.chalk.red('Owlrun utility'));
  console.log(_imports.chalk.red('It\'s for your pleasure.'));
  console.log(_imports.chalk.yellow('--------------'));
};

var installActionsFunc = function installActionsFunc() {
  _imports.inquirer.prompt([{
    type: 'list',
    name: 'install',
    message: 'What do you want to install? ',
    choices: ['React-starter', 'Angular-starter', 'Webpack4-starter']
  }]).then(function (e) {
    if (e.install === 'React-starter') {
      _imports.inquirer.prompt([{
        type: "Input",
        name: 'projname',
        message: 'Please send me a name of project!'
      }]).then(function (answers) {
        doIt('git', ['clone', 'https://github.com/AndersDeath/owl-react-starter.git', answers.projname]);
      });
    }

    if (e.install === 'Angular-starter') {
      _imports.inquirer.prompt([{
        type: "Input",
        name: 'projname',
        message: 'Please send me a name of project!'
      }]).then(function (answers) {
        doIt('git', ['clone', 'https://github.com/AndersDeath/owl-ng-starter.git', answers.projname]);
      });
    }

    if (e.install === 'Webpack4-starter') {
      _imports.inquirer.prompt([{
        type: "Input",
        name: 'projname',
        message: 'Please send me a name of project!'
      }]).then(function (answers) {
        doIt('git', ['clone', 'https://github.com/AndersDeath/webpack4-pug-sass-images-fonts-sarter.git', answers.projname]);
      });
    }
  });
};

var doIt = function doIt(command) {
  var argumenti = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  (0, _imports.execa)(command, argumenti, {
    stdio: 'inherit'
  });
};

introduce();

_imports.inquirer.prompt([{
  type: 'list',
  name: 'projects',
  message: 'What do you want to do?:',
  choices: ['install', 'exit']
}]).then(function (e) {
  if (e.projects === 'install') {
    installActionsFunc();
  }

  if (e.projects === 'exit') {
    console.log(_imports.chalk.red('Owlrun utility is closed'));
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnRyb2R1Y2UiLCJjb25zb2xlIiwibG9nIiwiY2hhbGsiLCJ5ZWxsb3ciLCJmaWdsZXQiLCJ0ZXh0U3luYyIsInJlZCIsImluc3RhbGxBY3Rpb25zRnVuYyIsImlucXVpcmVyIiwicHJvbXB0IiwidHlwZSIsIm5hbWUiLCJtZXNzYWdlIiwiY2hvaWNlcyIsInRoZW4iLCJlIiwiaW5zdGFsbCIsImFuc3dlcnMiLCJkb0l0IiwicHJvam5hbWUiLCJjb21tYW5kIiwiYXJndW1lbnRpIiwic3RkaW8iLCJwcm9qZWN0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFHQSxJQUFNQSxTQUFTLEdBQUcsU0FBWkEsU0FBWSxHQUFNO0FBQ3BCQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FDSUMsZUFBTUMsTUFBTixDQUNJQyxnQkFBT0MsUUFBUCxDQUFnQixnQkFBaEIsRUFBa0MsRUFBbEMsQ0FESixDQURKO0FBS0FMLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUNJQyxlQUFNQyxNQUFOLENBQ0ksZ0JBREosQ0FESjtBQUtBSCxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FDSUMsZUFBTUksR0FBTixDQUNJLGdCQURKLENBREo7QUFLQU4sRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQ0lDLGVBQU1JLEdBQU4sQ0FDSSwwQkFESixDQURKO0FBS0FOLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUNJQyxlQUFNQyxNQUFOLENBQ0ksZ0JBREosQ0FESjtBQUtILENBMUJEOztBQTRCQSxJQUFNSSxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLEdBQU07QUFDN0JDLG9CQUFTQyxNQUFULENBQWdCLENBQUM7QUFDYkMsSUFBQUEsSUFBSSxFQUFFLE1BRE87QUFFYkMsSUFBQUEsSUFBSSxFQUFFLFNBRk87QUFHYkMsSUFBQUEsT0FBTyxFQUFFLCtCQUhJO0FBSWJDLElBQUFBLE9BQU8sRUFBRSxDQUFDLGVBQUQsRUFBa0IsaUJBQWxCLEVBQXFDLGtCQUFyQztBQUpJLEdBQUQsQ0FBaEIsRUFLSUMsSUFMSixDQUtTLFVBQUNDLENBQUQsRUFBWTtBQUNqQixRQUFJQSxDQUFDLENBQUNDLE9BQUYsS0FBYyxlQUFsQixFQUFtQztBQUMvQlIsd0JBQ0tDLE1BREwsQ0FDWSxDQUFDO0FBQUVDLFFBQUFBLElBQUksRUFBRSxPQUFSO0FBQWlCQyxRQUFBQSxJQUFJLEVBQUUsVUFBdkI7QUFBbUNDLFFBQUFBLE9BQU8sRUFBRTtBQUE1QyxPQUFELENBRFosRUFFS0UsSUFGTCxDQUVVLFVBQUNHLE9BQUQsRUFBa0I7QUFDcEJDLFFBQUFBLElBQUksQ0FBQyxLQUFELEVBQVEsQ0FBQyxPQUFELEVBQVUsc0RBQVYsRUFBa0VELE9BQU8sQ0FBQ0UsUUFBMUUsQ0FBUixDQUFKO0FBQ0gsT0FKTDtBQUtIOztBQUNELFFBQUlKLENBQUMsQ0FBQ0MsT0FBRixLQUFjLGlCQUFsQixFQUFxQztBQUNqQ1Isd0JBQ0tDLE1BREwsQ0FDWSxDQUFDO0FBQUVDLFFBQUFBLElBQUksRUFBRSxPQUFSO0FBQWlCQyxRQUFBQSxJQUFJLEVBQUUsVUFBdkI7QUFBbUNDLFFBQUFBLE9BQU8sRUFBRTtBQUE1QyxPQUFELENBRFosRUFFS0UsSUFGTCxDQUVVLFVBQUNHLE9BQUQsRUFBa0I7QUFDcEJDLFFBQUFBLElBQUksQ0FBQyxLQUFELEVBQVEsQ0FBQyxPQUFELEVBQVUsbURBQVYsRUFBK0RELE9BQU8sQ0FBQ0UsUUFBdkUsQ0FBUixDQUFKO0FBQ0gsT0FKTDtBQUtIOztBQUNELFFBQUlKLENBQUMsQ0FBQ0MsT0FBRixLQUFjLGtCQUFsQixFQUFzQztBQUNsQ1Isd0JBQ0tDLE1BREwsQ0FDWSxDQUFDO0FBQUVDLFFBQUFBLElBQUksRUFBRSxPQUFSO0FBQWlCQyxRQUFBQSxJQUFJLEVBQUUsVUFBdkI7QUFBbUNDLFFBQUFBLE9BQU8sRUFBRTtBQUE1QyxPQUFELENBRFosRUFFS0UsSUFGTCxDQUVVLFVBQUNHLE9BQUQsRUFBa0I7QUFDcEJDLFFBQUFBLElBQUksQ0FBQyxLQUFELEVBQVEsQ0FBQyxPQUFELEVBQVUsMEVBQVYsRUFBc0ZELE9BQU8sQ0FBQ0UsUUFBOUYsQ0FBUixDQUFKO0FBQ0gsT0FKTDtBQUtIO0FBQ0osR0EzQkQ7QUE0QkgsQ0E3QkQ7O0FBZ0NBLElBQU1ELElBQUksR0FBRyxTQUFQQSxJQUFPLENBQUNFLE9BQUQsRUFBdUM7QUFBQSxNQUF4QkMsU0FBd0IsdUVBQVAsRUFBTztBQUNoRCxzQkFBTUQsT0FBTixFQUFlQyxTQUFmLEVBQTBCO0FBQUVDLElBQUFBLEtBQUssRUFBRTtBQUFULEdBQTFCO0FBQ0gsQ0FGRDs7QUFJQXZCLFNBQVM7O0FBRVRTLGtCQUFTQyxNQUFULENBQWdCLENBQUM7QUFDYkMsRUFBQUEsSUFBSSxFQUFFLE1BRE87QUFFYkMsRUFBQUEsSUFBSSxFQUFFLFVBRk87QUFHYkMsRUFBQUEsT0FBTyxFQUFFLDBCQUhJO0FBSWJDLEVBQUFBLE9BQU8sRUFBRSxDQUFDLFNBQUQsRUFBWSxNQUFaO0FBSkksQ0FBRCxDQUFoQixFQUtJQyxJQUxKLENBS1MsVUFBQ0MsQ0FBRCxFQUFZO0FBQ2pCLE1BQUlBLENBQUMsQ0FBQ1EsUUFBRixLQUFlLFNBQW5CLEVBQThCO0FBQzFCaEIsSUFBQUEsa0JBQWtCO0FBQ3JCOztBQUNELE1BQUlRLENBQUMsQ0FBQ1EsUUFBRixLQUFlLE1BQW5CLEVBQTJCO0FBQ3ZCdkIsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQ0lDLGVBQU1JLEdBQU4sQ0FDSSwwQkFESixDQURKO0FBS0g7QUFDSixDQWhCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNoYWxrLCBmaWdsZXQsIGlucXVpcmVyLCBleGVjYSB9IGZyb20gJy4vaW1wb3J0cyc7XG5cblxuY29uc3QgaW50cm9kdWNlID0gKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBjaGFsay55ZWxsb3coXG4gICAgICAgICAgICBmaWdsZXQudGV4dFN5bmMoJ093bHJ1biB1dGlsaXR5Jywge30pXG4gICAgICAgIClcbiAgICApO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBjaGFsay55ZWxsb3coXG4gICAgICAgICAgICAnLS0tLS0tLS0tLS0tLS0nXG4gICAgICAgIClcbiAgICApO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBjaGFsay5yZWQoXG4gICAgICAgICAgICAnT3dscnVuIHV0aWxpdHknXG4gICAgICAgIClcbiAgICApO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBjaGFsay5yZWQoXG4gICAgICAgICAgICAnSXRcXCdzIGZvciB5b3VyIHBsZWFzdXJlLidcbiAgICAgICAgKVxuICAgICk7XG4gICAgY29uc29sZS5sb2coXG4gICAgICAgIGNoYWxrLnllbGxvdyhcbiAgICAgICAgICAgICctLS0tLS0tLS0tLS0tLSdcbiAgICAgICAgKVxuICAgICk7XG59XG5cbmNvbnN0IGluc3RhbGxBY3Rpb25zRnVuYyA9ICgpID0+IHtcbiAgICBpbnF1aXJlci5wcm9tcHQoW3tcbiAgICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgICBuYW1lOiAnaW5zdGFsbCcsXG4gICAgICAgIG1lc3NhZ2U6ICdXaGF0IGRvIHlvdSB3YW50IHRvIGluc3RhbGw/ICcsXG4gICAgICAgIGNob2ljZXM6IFsnUmVhY3Qtc3RhcnRlcicsICdBbmd1bGFyLXN0YXJ0ZXInLCAnV2VicGFjazQtc3RhcnRlciddXG4gICAgfV0pLnRoZW4oKGU6IGFueSkgPT4ge1xuICAgICAgICBpZiAoZS5pbnN0YWxsID09PSAnUmVhY3Qtc3RhcnRlcicpIHtcbiAgICAgICAgICAgIGlucXVpcmVyXG4gICAgICAgICAgICAgICAgLnByb21wdChbeyB0eXBlOiBcIklucHV0XCIsIG5hbWU6ICdwcm9qbmFtZScsIG1lc3NhZ2U6ICdQbGVhc2Ugc2VuZCBtZSBhIG5hbWUgb2YgcHJvamVjdCEnIH1dKVxuICAgICAgICAgICAgICAgIC50aGVuKChhbnN3ZXJzOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZG9JdCgnZ2l0JywgWydjbG9uZScsICdodHRwczovL2dpdGh1Yi5jb20vQW5kZXJzRGVhdGgvb3dsLXJlYWN0LXN0YXJ0ZXIuZ2l0JywgYW5zd2Vycy5wcm9qbmFtZV0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLmluc3RhbGwgPT09ICdBbmd1bGFyLXN0YXJ0ZXInKSB7XG4gICAgICAgICAgICBpbnF1aXJlclxuICAgICAgICAgICAgICAgIC5wcm9tcHQoW3sgdHlwZTogXCJJbnB1dFwiLCBuYW1lOiAncHJvam5hbWUnLCBtZXNzYWdlOiAnUGxlYXNlIHNlbmQgbWUgYSBuYW1lIG9mIHByb2plY3QhJyB9XSlcbiAgICAgICAgICAgICAgICAudGhlbigoYW5zd2VyczogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRvSXQoJ2dpdCcsIFsnY2xvbmUnLCAnaHR0cHM6Ly9naXRodWIuY29tL0FuZGVyc0RlYXRoL293bC1uZy1zdGFydGVyLmdpdCcsIGFuc3dlcnMucHJvam5hbWVdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS5pbnN0YWxsID09PSAnV2VicGFjazQtc3RhcnRlcicpIHtcbiAgICAgICAgICAgIGlucXVpcmVyXG4gICAgICAgICAgICAgICAgLnByb21wdChbeyB0eXBlOiBcIklucHV0XCIsIG5hbWU6ICdwcm9qbmFtZScsIG1lc3NhZ2U6ICdQbGVhc2Ugc2VuZCBtZSBhIG5hbWUgb2YgcHJvamVjdCEnIH1dKVxuICAgICAgICAgICAgICAgIC50aGVuKChhbnN3ZXJzOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZG9JdCgnZ2l0JywgWydjbG9uZScsICdodHRwczovL2dpdGh1Yi5jb20vQW5kZXJzRGVhdGgvd2VicGFjazQtcHVnLXNhc3MtaW1hZ2VzLWZvbnRzLXNhcnRlci5naXQnLCBhbnN3ZXJzLnByb2puYW1lXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuXG5jb25zdCBkb0l0ID0gKGNvbW1hbmQ6IGFueSwgYXJndW1lbnRpOiBhbnkgPSBbXSkgPT4ge1xuICAgIGV4ZWNhKGNvbW1hbmQsIGFyZ3VtZW50aSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pXG59XG5cbmludHJvZHVjZSgpO1xuXG5pbnF1aXJlci5wcm9tcHQoW3tcbiAgICB0eXBlOiAnbGlzdCcsXG4gICAgbmFtZTogJ3Byb2plY3RzJyxcbiAgICBtZXNzYWdlOiAnV2hhdCBkbyB5b3Ugd2FudCB0byBkbz86JyxcbiAgICBjaG9pY2VzOiBbJ2luc3RhbGwnLCAnZXhpdCddXG59XSkudGhlbigoZTogYW55KSA9PiB7XG4gICAgaWYgKGUucHJvamVjdHMgPT09ICdpbnN0YWxsJykge1xuICAgICAgICBpbnN0YWxsQWN0aW9uc0Z1bmMoKTtcbiAgICB9XG4gICAgaWYgKGUucHJvamVjdHMgPT09ICdleGl0Jykge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgIGNoYWxrLnJlZChcbiAgICAgICAgICAgICAgICAnT3dscnVuIHV0aWxpdHkgaXMgY2xvc2VkJ1xuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cbn0pO1xuIl19